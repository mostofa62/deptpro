"use client";
import FullPageLayout from "@/app/layout/FullPageLayout";
//import Chat from "./components/Chat";
import { useState, useEffect } from "react";
//import Link from "next/link";
import Image from "next/image";
import Logo from "@/app/images/logo/logo.svg";
import {
  Formik,
  Form,
  Field,
  yupToFormErrors,
  validateYupSchema,
} from "formik";
import { useRouter } from "next/navigation";
import axios from "axios";

//import AuthContext from "@/app/context/auth-context";
//import { Metadata, ResolvingMetadata } from 'next';
import useAuth from "@/app/hooks/useAuth";
import { setCookie } from "cookies-next";
import Link from "next/link";
import {
  DataSchema,
  DataLabel,
  disclosureAck,
  ValidationSchema,
} from "./RegistrationSchema";
import CheckComponent from "@/app/components/CheckComponent";
import Loading from "@/app/images/icon/loading";
/*
export const metadata = {
  title: 'Registration',
  description: 'Generated by create next app',
}
*/
const url = process.env.NEXT_PUBLIC_API_URL;
const app_name: any = process.env.app_name;

const Registration = () => {
  const authContext = useAuth();
  const isLoggedIn = authContext.isLoggedIn;
  const router = useRouter();

  const [loading, setLoading] = useState(false);

  /*
  useEffect(()=>{
    if(isLoggedIn){
      router.push('/dashboard');
    }
  },[isLoggedIn,router])
  */

  const [error, setError] = useState(0);
  const [errMessage, setErrMessage] = useState("");
  const user = DataSchema;
  

  const handleFormSubmit = async (values: any, { resetForm }: any) => {
    setLoading(true);
    await axios
      .post(`${url}member-registrationpg`, values.user, {
        headers: {
          "Content-Type": "application/json",
        },
      })
      .then(function (response) {
        //console.log(response);

        if (response.data.error > 0) {
          setError(response.data.error);
          setErrMessage(response.data.message);
        } else {
          setError(response.data.error);
          setErrMessage(response.data.message);
          resetForm();
        }
      })
      .catch(function (error) {
        //console.log(error);
        setError(0);
        setErrMessage(error);
      });

      setLoading(false);
  };

  return (
    <FullPageLayout>
      <div className="md:w-2/3 lg:w-2/3 lmd:w-full mx-auto">
      
        <div className="flex items-stretch sm:rounded-[50px] sm:my-[5%]  sm:shadow-[0_0_50px_rgba(0,0,0,0.3)]">          

          <div className="hidden lmd:block lg:block w-full xl:block xl:w-1/2 rounded-l-[50px]">
            <div className="flex h-full items-center justify-center px-10">
              <div className="h-65 w-65  rounded-full flex items-center justify-center bg-white">
                <a href="/">
                  <Image src={Logo} alt={app_name} height={100} />
                </a>
              </div>
            </div>
          </div>

          <div className="hidden sm:flex sm:bg-[#E69A52] sm:w-1.5 shadow-[0_0_50px_rgba(0,0,0,0.3)]">
            <div className="absolute mt-5 px-5 py-2 rounded-r-[50px] text-white capitalize font-semibold bg-[#43ACD6] ring-1 shadow">
              welcome back
            </div>
            <div className="hidden text-[#E69A52] w-1.5"></div>
          </div>

          <div className="w-full xl:w-3/4 bg-white h-[100vh] sm:h-auto rounded-xl sm:rounded-l-none  sm:rounded-r-[50px] md:rounded-r-[50px] shadow-[0_0_50px_rgba(0,0,0,0.3)] flex">
            <div className="flex flex-col md:justify-center sm:mt-8 gap-2.5 sm:gap-1 w-full  sm:p-10.5 xl:p-12.5">

              <div className="sm:hidden w-full rounded-md flex items-center justify-center h-40 bg-[#43ACD6]">
                <div className="w-40 aspect-square rounded-full bg-white flex items-center justify-center shadow-[0_0_50px_rgba(0,0,0,0.3)]">
                  <a href="/">
                    <Image src={Logo} alt={app_name} height={100} />
                  </a>
                </div>
              </div>

              <h2 className="capitalize text-center font-bold text-[18px] sm:text-md mt-8 lmd:mt-18 sm:mt-0 text-[#43ACD6]">
                Registration
              </h2>


              <div className="h-6 lmd:my-3">

                  {error < 1 && errMessage.length > 1 ? (
                    <span className="my-1 py-1 px-3 font-[10px] text-[#ffffff] bg-[#32b332]">
                      {errMessage}
                      <span
                        className="relative top-0 left-2 p-2 cursor-pointer"
                        onClick={() => {
                          setErrMessage("");
                          setError(0);
                        }}
                      >
                        x
                      </span>
                    </span>
                  ) : (
                    <span className="my-1 font-semibold text-[#B45454]">
                      {errMessage}
                    </span>
                  )}

              </div>

              <Formik
                initialValues={{ user }}
                validationSchema={ValidationSchema}
                validateOnChange={false}
                validateOnBlur={false}
                onSubmit={handleFormSubmit}
                render={({
                  isValid,
                  handleChange,
                  isSubmitting,
                  values,
                  errors,
                  touched,
                  setFieldValue,
                  setFieldTouched,
                }) => (
                  <Form className="mt-3 flex flex-col w-full px-2 sm:px-0 sm:w-auto gap-4 sm:gap-2.5 lmd:gap-5">
                    <div className="">                     
                      <div className="relative flex flex-col gap-2">
                        <Field
                          className="w-full rounded-lg border border-stroke bg-transparent py-4 pl-2 pr-10 outline-none focus:border-[#43ACD6] focus-visible:shadow-none dark:border-form-strokedark dark:bg-form-input dark:focus:border-[#43ACD6]"
                          type="text"
                          name="user.name"
                          placeholder={DataLabel.name}
                        />
                        <div className="h-6">
                          {errors.user &&
                            errors.user.name &&
                            touched.user &&
                            touched.user.name && (
                              <span className="mt-3 font-semibold text-[#B45454]">
                                {errors.user.name}
                              </span>
                            )}
                        </div>
                      </div>
                    </div>

                    <div className="">                     
                      <div className="relative flex flex-col gap-2">
                        <Field
                          className="w-full rounded-lg border border-stroke bg-transparent py-4 pl-2 pr-10 outline-none focus:border-[#43ACD6] focus-visible:shadow-none dark:border-form-strokedark dark:bg-form-input dark:focus:border-[#43ACD6]"
                          name="user.email"
                          placeholder={DataLabel.email}
                          onChange={(event: any) => {
                            //console.log(event.target.value)
                            handleChange("user.email")(event);
                            if (event.target.value.includes("@")) {
                              handleChange("user.isEmail")("1");
                              //console.log(values.user.isEmail)
                            } else {
                              handleChange("user.isEmail")("0");
                            }
                          }}
                        />
                        <div className="h-6">
                          {errors.user &&
                            errors.user.email &&
                            touched.user &&
                            touched.user.email && (
                              <span className="mt-5 font-semibold text-[#B45454]">
                                {errors.user.email}
                              </span>
                            )}
                        </div>
                      </div>
                    </div>

                    <div className="">                      
                      <div className="relative flex flex-col gap-2">
                        <Field
                          className="w-full rounded-lg border border-stroke bg-transparent py-4 pl-2 pr-10 outline-none focus:border-[#43ACD6] focus-visible:shadow-none dark:border-form-strokedark dark:bg-form-input dark:focus:border-[#43ACD6]"
                          type="text"
                          name="user.phone"
                          placeholder={DataLabel.phone}
                        />
                        <div className="h-6">
                        {errors.user &&
                          errors.user.phone &&
                          touched.user &&
                          touched.user.phone && (
                            <span className="mt-3 font-semibold text-[#B45454]">
                              {errors.user.phone}
                            </span>
                          )}
                        </div>
                      </div>
                    </div>

                    <div className="">                      
                      <div className="relative flex flex-col gap-2">
                        <Field
                          className="w-full rounded-lg border border-stroke bg-transparent py-4 pl-2 pr-10 outline-none focus:border-[#43ACD6] focus-visible:shadow-none dark:border-form-strokedark dark:bg-form-input dark:focus:border-[#43ACD6]"
                          type="password"
                          name="user.password"
                          placeholder={DataLabel.password}
                        />
                        <div className="h-6">
                          {errors.user &&
                            errors.user.password &&
                            touched.user &&
                            touched.user.password && (
                              <span className="mt-3 font-semibold text-[#B45454]">
                                {errors.user.password}
                              </span>
                            )}
                        </div>
                      </div>
                    </div>

                    <div className="">
                      <div className="relative top-7 lmd:top-9 flex flex-col gap-2">
                        <Field
                          component={CheckComponent}
                          name="user.disclosure"
                          label={DataLabel.disclosure}
                          checked={
                            values.user.disclosure.value === disclosureAck.value
                          }
                          errorClass={
                            errors.user &&
                            errors.user.disclosure &&
                            touched.user &&
                            touched.user.disclosure &&
                            "font-semibold text-[#B45454]"
                          }
                          onChange={(e: any) => {
                            const { checked, name } = e.target;

                            if (checked) {
                              setFieldTouched(name, true);

                              setFieldValue(name, disclosureAck);
                            } else {
                              setFieldTouched(name, false);
                              setFieldValue(name, user.disclosure);
                            }
                          }}
                        />
                        {/*errors.user &&
                                        
                                        errors.user.disclosure &&
                                        touched.user &&
                                        
                                        touched.user.disclosure && ( 
                                            <span className="mt-3 font-semibold text-[#B45454]">
                                                {errors.user.disclosure.label}
                                            </span>   
                                        )*/}
                      </div>
                    </div>

                    <div className="mt-5 lmd:mt-8 sm:mt-3 md:mt-10">
                      <button
                                              type="submit"
                                              className="text-[18px] sm:text-md flex justify-center items-center gap-1 w-full cursor-pointer rounded-lg border  bg-[#43ACD6] p-4 text-[#f5f5f8] transition hover:bg-opacity-90 md:font-bold"
                                            >
                                              {loading ? (
                                                <Loading width={50} stroke="#E69A52" />
                                              ) : (
                                                <span className="capitalize">register</span>
                                              )}
                                            </button>
                      {/* <input
                        type="submit"
                        value="Register"
                        className="w-[50%] ml-[10%] cursor-pointer rounded-sm border border-primary bg-[#0a4a82] p-1 text-[#f5f5f8] transition hover:bg-opacity-90 md:font-medium"
                      /> */}
                    </div>
                  </Form>
                )}
              />

              <Link
                className="mt-5 sm:mt-5 md:mt-6 lmd:mt-8 lg:mt-10 text-[18px] sm:text-md text-center capitalize font-bold text-[#43ACD6]"
                href="/"
              >
                already registerd, login
              </Link>
            </div>
          </div>
        </div>
      </div>
      
    </FullPageLayout>
  );
};
/*
export async function generateMetadata() {
  // read route params then fetch data

  // return an object
  return {
    title: 'Registration',
    //description: '',
  };
}
*/

export default Registration;
